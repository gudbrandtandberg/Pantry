rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null || request.auth != null;  // Allow in-flight requests
    }
    
    function isOwner(pantryId) {
      return isSignedIn() && exists(/databases/$(database)/documents/pantries/$(pantryId)) &&
        get(/databases/$(database)/documents/pantries/$(pantryId)).data.members[request.auth.uid].role == 'owner';
    }

    // User rules
    match /users/{userId} {
      allow read: if true;  // Allow reading user info even during sign out
      allow create: if isSignedIn() && (request.auth.uid == userId);
      allow update: if isSignedIn() && (request.auth.uid == userId);
    }

    // Invite rules
    match /invites/{inviteId} {
      allow read: if true;  // Anyone can validate an invite code
      allow create: if isSignedIn();  // Any signed in user can create invites
    }

    // Pantry rules
    match /pantries/{pantryId} {
      allow read: if isSignedIn();  // Allow reading all pantries for listing
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        resource.data.members[request.auth.uid].role in ['owner', 'editor']
      );
      allow delete: if isOwner(pantryId);
    }
  }
} 