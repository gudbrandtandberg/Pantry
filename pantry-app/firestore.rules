rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;  // Simplified, duplicate condition removed
    }
    
    // User rules
    match /users/{userId} {
      allow read: if true;  // Allow reading user info even during sign out
      allow create: if isSignedIn() && (request.auth.uid == userId);
      allow update: if isSignedIn() && (request.auth.uid == userId);
    }

    // Invite rules
    match /invites/{inviteId} {
      allow read: if true;  // Anyone can validate an invite code
      allow create: if isSignedIn();  // Any signed in user can create invites
    }

    // Pantry rules
    match /pantries/{pantryId} {
      allow read: if isSignedIn();  // Allow reading all pantries for listing
      allow create: if request.auth != null;  // Explicit check instead of function call
      allow update: if isSignedIn() && (
        // Either they're the owner making changes
        (resource.data.members != null && 
         resource.data.members[request.auth.uid] != null && 
         resource.data.members[request.auth.uid].role == 'owner' &&
         // And if updating inviteLinks, ensure they're only adding/modifying them
         (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['inviteLinks']) ||
          request.resource.data.inviteLinks.keys().hasAll(resource.data.inviteLinks.keys()))) ||
        // OR they're a member making normal updates (but not to inviteLinks)
        (resource.data.members != null &&
         resource.data.members[request.auth.uid] != null &&
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['inviteLinks', 'members'])) ||
        // OR check if they're joining with a valid invite link
        (resource.data.inviteLinks != null && 
         request.resource.data.inviteCode in resource.data.inviteLinks)
      );
      allow delete: if isSignedIn() && 
        resource.data.members[request.auth.uid].role == 'owner';
    }
  }
} 