rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /pantries/{pantryId} {
      // Allow listing pantries where user is a member
      allow list: if request.auth != null && 
          (
              // New structure: user is in members map
              (('members' in resource.data) && 
               (request.auth.uid in resource.data.members)) ||
              // Old structure: user is creator
              resource.data.createdBy == request.auth.uid
          );
      
      // Allow reading specific pantry if user is a member
      allow get: if request.auth != null && 
          (
              // Check if user is member
              (('members' in resource.data) && 
               (request.auth.uid in resource.data.members)) ||
              // Or if user is creator
              resource.data.createdBy == request.auth.uid
          );
      
      // Allow creating new pantries
      allow create: if request.auth != null && 
          request.resource.data.createdBy == request.auth.uid &&
          ('members' in request.resource.data) &&
          request.resource.data.members[request.auth.uid].role == 'owner';
      
      // Allow updates and deletes for owners and editors
      allow update, delete: if request.auth != null && (
          (
              // New structure: user is owner/editor
              (('members' in resource.data) && 
               (request.auth.uid in resource.data.members) &&
               resource.data.members[request.auth.uid].role in ['owner', 'editor']) ||
              // Old structure: user is creator
              resource.data.createdBy == request.auth.uid ||
              // Migration update
              (('members' in request.resource.data) &&
               request.resource.data.members[request.auth.uid].role == 'owner' &&
               resource.data.createdBy == request.auth.uid)
          ) ||
          // Allow joining via valid invite link
          (
              // Only updating members and inviteLinks
              request.resource.data.diff(resource.data).affectedKeys()
                  .hasOnly(['members', 'inviteLinks']) &&
              // Only adding self as member
              request.resource.data.members.diff(resource.data.members).affectedKeys()
                  .hasOnly([request.auth.uid]) &&
              // Only marking invite as used
              request.resource.data.inviteLinks.diff(resource.data.inviteLinks)
                  .affectedKeys().size() == 1 &&
              // Invite exists and hasn't been used
              resource.data.inviteLinks[request.resource.data.inviteLinks
                  .diff(resource.data.inviteLinks).affectedKeys()[0]].used == false
          )
      );
    }
  }
} 